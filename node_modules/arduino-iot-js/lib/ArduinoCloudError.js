"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
* Copyright 2018 ARDUINO SA (http://www.arduino.cc/)
* This file is part of arduino-iot-js.
* Copyright (c) 2018
* Authors: Fabrizio Mirabito
*
* This software is released under:
* The GNU General Public License, which covers the main part of
* arduino-iot-js
* The terms of this license can be found at:
* https://www.gnu.org/licenses/gpl-3.0.en.html
*
* You can be released from the requirements of the above licenses by purchasing
* a commercial license. Buying such a license is mandatory if you want to modify or
* otherwise use the software for commercial activities involving the Arduino
* software without disclosing the source code of your own applications. To purchase
* a commercial license, send an email to license@arduino.cc.
*
*/
var ArduinoCloudError = function (_Error) {
  _inherits(ArduinoCloudError, _Error);

  function ArduinoCloudError(code, message) {
    _classCallCheck(this, ArduinoCloudError);

    // Saving class name in the property of our custom error as a shortcut.
    var _this = _possibleConstructorReturn(this, (ArduinoCloudError.__proto__ || Object.getPrototypeOf(ArduinoCloudError)).call(this, message));

    _this.name = _this.constructor.name;

    try {
      Error.captureStackTrace(_this, _this.constructor);
    } catch (error) {
      // noop
    }

    _this.code = code;
    return _this;
  }

  return ArduinoCloudError;
}(Error);

exports.default = ArduinoCloudError;